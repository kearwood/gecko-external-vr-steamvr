cmake_minimum_required (VERSION 2.6)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if (NOT WIN32)
  set(CMAKE_CXX_COMPILER "clang++")
endif()

macro (add_sources)
    file (RELATIVE_PATH _relPath "${PROJECT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}")
    foreach (_src ${ARGN})
        if (_relPath)
            list (APPEND SRCS "${_relPath}/${_src}")
        else()
            list (APPEND SRCS "${_src}")
        endif()
    endforeach()
    if (_relPath)
        # propagate SRCS to parent directory
        set (SRCS ${SRCS} PARENT_SCOPE)
    endif()
endmacro()

project (gecko-steamvr)
include_directories(3rdparty/gecko_external_vr/include)
include_directories(3rdparty/kraken-math/include)
include_directories(3rdparty/openvr/headers)
add_sources(main.cpp)
add_sources(3rdparty/gecko_external_vr/src/gecko_vr.cpp)

add_sources(3rdparty/kraken-math/src/aabb.cpp)
add_sources(3rdparty/kraken-math/src/hitinfo.cpp)
add_sources(3rdparty/kraken-math/src/krhelpers.cpp)
add_sources(3rdparty/kraken-math/src/matrix4.cpp)
add_sources(3rdparty/kraken-math/src/quaternion.cpp)
add_sources(3rdparty/kraken-math/src/scalar.cpp)
add_sources(3rdparty/kraken-math/src/triangle3.cpp)
add_sources(3rdparty/kraken-math/src/vector2.cpp)
add_sources(3rdparty/kraken-math/src/vector3.cpp)
add_sources(3rdparty/kraken-math/src/vector4.cpp)

add_executable(gecko-steamvr ${SRCS})

configure_file(${CMAKE_SOURCE_DIR}/3rdparty/openvr/bin/win64/openvr_api.dll ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
target_link_libraries(gecko-steamvr ${CMAKE_SOURCE_DIR}/3rdparty/openvr/lib/win64/openvr_api.lib)